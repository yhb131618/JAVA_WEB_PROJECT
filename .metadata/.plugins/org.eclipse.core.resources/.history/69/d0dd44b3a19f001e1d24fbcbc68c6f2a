package kr.bit.frontcontroller;

import java.io.IOException;
import java.util.ArrayList;

import javax.servlet.RequestDispatcher;
import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import kr.bit.model.MemberDAO;
import kr.bit.model.MemberVO;

/**
 * Servlet implementation class MemberFrontController
 */
@WebServlet("*.do")
public class MemberFrontController extends HttpServlet {

	protected void service(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
	
	request.setCharacterEncoding("edu-kr");	
	// 클라이언트가 어떤 요청을 했는지 파악하기
	String url = request.getRequestURI();
	System.out.println(url); //MVC04/memberlist.do 리턴
	
	String ctx=request.getContextPath();
	System.out.println(ctx); //MVC04 리턴
	
	// 실제로 요청한 명령이 무엇인지 파악
	String command = url.substring(ctx.length());
	System.out.println(command); //memberlist.do 리턴
	

	//요청에 따른 분기작업
	if(command.equals("/memberlist.do")) {
		MemberDAO dao = new MemberDAO();
		ArrayList<MemberVO> list=dao.memberList();
		request.setAttribute("list", list);
		RequestDispatcher rd =request.getRequestDispatcher("member/memberlist.jsp");
		rd.forward(request, response);
		
	} else if (command.equals("/memberInsert.do")) {
	    //파라메터수집(VO)
		//request.setCharacterEncoding("utf-8");
		String id = request.getParameter("id");
		String pass =request.getParameter("pass");
		String name = request.getParameter("name");
		int age = Integer.parseInt(request.getParameter("age"));
		String email = request.getParameter("email");
		String phone = request.getParameter("phone");
		
		//MemverVo vo = new Member(id, pass, name, age, email, phone);
		MemberVO vo = new MemberVO();
		vo.setId(id);
		vo.setPass(pass);
		vo.setName(name);
		vo.setAge(age);
		vo.setEmail(email);
		vo.setPhone(phone);
		
		MemberDAO dao = new MemberDAO();
		
		int cnt = dao.memberInsert(vo);
	
		if(cnt>0) {
			//out.println("insert success");
			//다시 회원리스트 보기로 복귀
			response.sendRedirect("/MVC04/memberlist.do");
			
		} else {	
			// 가입실행 -> 예외 객체를 만들어서 WAS에 던지자.
			throw new ServletException("not insert");
			
		}
				
	} else if (command.equals("/memberContent.do")) {
		int num = Integer.parseInt(request.getParameter("num"));
		
		MemberDAO dao = new MemberDAO();
		MemberVO vo = dao.memberContent(num);
		//객체 바인딩
		request.setAttribute("vo", vo);
		//forward 기법
		RequestDispatcher rd = request.getRequestDispatcher("member/memberContent.jsp");
		rd.forward(request, response);
		
		
	} else if (command.equals("/memberRegisert.do")) {
		RequestDispatcher rd =request.getRequestDispatcher("member/memberRegister.html");
		rd.forward(request, response);	
		
	} else if (command.equals("/memberDelete.do")) {
		int num = Integer.parseInt(request.getParameter("num"));
		System.out.println(num);
		MemberDAO dao = new MemberDAO();
		int cnt = dao.memberDelete(num);
		if(cnt>0) {
			response.sendRedirect("/MVC03/memberlist.do");
		}else {
			throw new ServletException("not Delete");
		}
		
	} else if (command.equals("/memberUpdate.do")) {
		//한글처리 
		request.setCharacterEncoding("utf-8");
		// 1.파라미터 수집(VO)
		int num = Integer.parseInt(request.getParameter("num"));
		int age = Integer.parseInt(request.getParameter("age"));
		String email = (request.getParameter("email"));
		String phone = (request.getParameter("phone"));
		
		//MemverVo vo = new Member(id, pass, name, age, email, phone);
		MemberVO vo = new MemberVO();
		vo.setNum(num);
		vo.setAge(age);
		vo.setEmail(email);
		vo.setPhone(phone);
		
		
		MemberDAO dao = new MemberDAO();
		
		int cnt = dao.memberUpdate(vo);

		//PrintWriter out = response.getWriter();
				
		if(cnt>0) {
			//out.println("insert success");
			//다시 회원리스트 보기로 복귀
			response.sendRedirect("/MVC04/memberlist.do");
			
		} else {	
			// 가입실행 -> 예외 객체를 만들어서 WAS에 던지자.
			throw new ServletException("not Update");
			
		}
			
	}
	}
}
